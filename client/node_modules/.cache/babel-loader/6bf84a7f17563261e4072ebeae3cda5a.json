{"ast":null,"code":"import _classCallCheck from \"/Users/peterckim/Desktop/movies/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/peterckim/Desktop/movies/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/peterckim/Desktop/movies/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/peterckim/Desktop/movies/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/peterckim/Desktop/movies/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/peterckim/Desktop/movies/src/components/MovieInformation.js\";\nimport React, { Component } from \"react\";\nimport { styles } from \"../styles\";\nimport Button from \"./Button\";\nimport Cast from \"./Cast\";\n\nvar MovieInformation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MovieInformation, _Component);\n\n  function MovieInformation() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MovieInformation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MovieInformation)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      movieHighlighted: null\n    };\n    return _this;\n  }\n\n  _createClass(MovieInformation, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var genreList = [];\n\n      if (this.props.movie.genre_ids) {\n        this.props.movie.genre_ids.forEach(function (id) {\n          genreList.push(_this2.props.genres.find(function (genre) {\n            return genre.id == id;\n          }));\n        });\n      }\n\n      var genreElements = genreList.map(function (genre) {\n        return React.createElement(\"li\", {\n          key: genre.id,\n          style: styles.Genre,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, genre.name);\n      });\n\n      if (!this.state.movieHighlighted) {\n        return null;\n      }\n\n      return React.createElement(\"div\", {\n        style: styles.MovieInformation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: styles.BannerTextHeader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.props.movie.title), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.props.movie.release_date), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: styles.GreenText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.props.movie.vote_average), \"/10 (\", this.props.movie.vote_count, \"votes)\"), React.createElement(\"ul\", {\n        style: styles.GenreList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, genreElements), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, this.props.movie.overview), React.createElement(Button, {\n        content: \"Trailer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(Button, {\n        content: \"IMDB\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Cast, {\n        cast: this.state.movieHighlighted.credits.cast,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (this.props.movie) {\n        fetch(\"https://api.themoviedb.org/3/movie/\".concat(this.props.movie.id, \"?api_key=c9e315c4b389bc4340657616b8ebb88d&append_to_response=credits\")).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          _this3.setState({\n            movieHighlighted: data\n          });\n        });\n      }\n    }\n  }]);\n\n  return MovieInformation;\n}(Component);\n\nexport default MovieInformation;","map":{"version":3,"sources":["/Users/peterckim/Desktop/movies/src/components/MovieInformation.js"],"names":["React","Component","styles","Button","Cast","MovieInformation","state","movieHighlighted","genreList","props","movie","genre_ids","forEach","id","push","genres","find","genre","genreElements","map","Genre","name","BannerTextHeader","title","release_date","GreenText","vote_average","vote_count","GenreList","overview","credits","cast","fetch","then","response","json","data","setState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { styles } from \"../styles\";\n\nimport Button from \"./Button\";\nimport Cast from \"./Cast\";\n\nclass MovieInformation extends Component {\n  state = {\n    movieHighlighted: null\n  };\n\n  render() {\n    let genreList = [];\n\n    if (this.props.movie.genre_ids) {\n      this.props.movie.genre_ids.forEach(id => {\n        genreList.push(\n          this.props.genres.find(genre => {\n            return genre.id == id;\n          })\n        );\n      });\n    }\n\n    const genreElements = genreList.map(genre => {\n      return (\n        <li key={genre.id} style={styles.Genre}>\n          {genre.name}\n        </li>\n      );\n    });\n\n    if (!this.state.movieHighlighted) {\n      return null;\n    }\n\n    return (\n      <div style={styles.MovieInformation}>\n        <h1 style={styles.BannerTextHeader}>{this.props.movie.title}</h1>\n        <p>{this.props.movie.release_date}</p>\n        <p>\n          <span style={styles.GreenText}>{this.props.movie.vote_average}</span>\n          /10 ({this.props.movie.vote_count}\n          votes)\n        </p>\n        <ul style={styles.GenreList}>{genreElements}</ul>\n        <p>{this.props.movie.overview}</p>\n\n        <Button content={\"Trailer\"} />\n        <Button content={\"IMDB\"} />\n\n        <Cast cast={this.state.movieHighlighted.credits.cast} />\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    if (this.props.movie) {\n      fetch(\n        `https://api.themoviedb.org/3/movie/${\n          this.props.movie.id\n        }?api_key=c9e315c4b389bc4340657616b8ebb88d&append_to_response=credits`\n      )\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            movieHighlighted: data\n          });\n        });\n    }\n  }\n}\n\nexport default MovieInformation;\n"]},"metadata":{},"sourceType":"module"}